(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{364:function(t,S,s){"use strict";s.r(S);var v=s(33),_=Object(v.a)({},(function(){var t=this,S=t.$createElement,s=t._self._c||S;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"解锁浏览器背后的运行机制-从浏览器背后的运行机制中着手性能优化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#解锁浏览器背后的运行机制-从浏览器背后的运行机制中着手性能优化"}},[t._v("#")]),t._v(" 解锁浏览器背后的运行机制(从浏览器背后的运行机制中着手性能优化)")]),t._v(" "),s("blockquote",[s("p",[t._v("浏览器内核可以分成两部分：渲染引擎（Layout Engine 或者 Rendering Engine）和 JS 引擎\n渲染引擎又包括了 HTML 解释器、CSS 解释器、布局、网络、存储、图形、音视频、图片解码器等等零部件")]),t._v(" "),s("blockquote",[s("p",[t._v("HTML 解释器：将 HTML 文档经过词法分析输出 DOM 树"),s("br"),t._v("\nCSS 解释器：解析 CSS 文档, 生成样式规则。"),s("br"),t._v("\n图层布局计算模块：布局计算每个对象的精确位置和大小。"),s("br"),t._v("\n视图绘制模块：进行具体节点的图像绘制，将像素渲染到屏幕上。"),s("br"),t._v("\nJavaScript 引擎：编译执行 Javascript 代码。")])])]),t._v(" "),s("h2",{attrs:{id:"渲染过程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#渲染过程"}},[t._v("#")]),t._v(" 渲染过程")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/liucheng.png",alt:"渲染过程"}})]),t._v(" "),s("ul",[s("li",[t._v("DOM 树：解析 HTML 以创建的是 DOM 树（DOM tree ）：渲染引擎开始解析 HTML 文档，转换树中的标签到 DOM 节点，它被称为“内容树”。")]),t._v(" "),s("li",[t._v("CSSOM 树：解析 CSS（包括外部 CSS 文件和样式元素）创建的是 CSSOM 树。CSSOM 的解析过程与 DOM 的解析过程是并行的。")]),t._v(" "),s("li",[t._v("渲染树：CSSOM 与 DOM 结合，之后我们得到的就是渲染树（Render tree ）。")]),t._v(" "),s("li",[t._v("布局渲染树：从根节点递归调用，计算每一个元素的大小、位置等，给每个节点所应该出现在屏幕上的精确坐标，我们便得到了基于渲染树的布局渲染树（Layout of the render tree）")]),t._v(" "),s("li",[t._v("绘制渲染树: 遍历渲染树，每个节点将使用 UI 后端层来绘制。整个过程叫做绘制渲染树（Painting the render tree）。")])]),t._v(" "),s("p",[s("strong",[t._v("页面的初次渲染就大功告成之后，每当一个新元素加入到这个 DOM 树当中，浏览器便会通过 CSS 引擎查遍 CSS 样式表，找到符合该元素的样式规则应用到这个元素上，然后再重新去绘制它。")])]),t._v(" "),s("h3",{attrs:{id:"基于渲染流程的-css-优化建议"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基于渲染流程的-css-优化建议"}},[t._v("#")]),t._v(" 基于渲染流程的 CSS 优化建议")]),t._v(" "),s("p",[t._v("CSS 选择符是从右到左进行匹配的。"),s("br"),t._v("\n#myList  li {}    浏览器必须遍历页面上每个 li 元素，并且每次都要去确认这个 li 元素的父元素 id 是不是 myList，开销相当高")]),t._v(" "),s("p",[s("strong",[t._v("建议：")])]),t._v(" "),s("ul",[s("li",[t._v("避免使用通配符，只对需要用到的元素进行选择。")]),t._v(" "),s("li",[t._v("关注可以通过继承实现的属性，避免重复匹配重复定义。")]),t._v(" "),s("li",[t._v("少用标签选择器。如果可以，用类选择器替代")]),t._v(" "),s("li",[t._v("不要画蛇添足，id 和 class 选择器不应该被多余的标签选择器拖后腿")]),t._v(" "),s("li",[t._v("减少嵌套。后代选择器的开销是最高的，因此我们应该尽量将选择器的深度降到最低（最高不要超过三层），尽可能使用类来关联每一个标签元素")])]),t._v(" "),s("h3",{attrs:{id:"告别阻塞：css-与-js-的加载顺序优化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#告别阻塞：css-与-js-的加载顺序优化"}},[t._v("#")]),t._v(" 告别阻塞：CSS 与 JS 的加载顺序优化")]),t._v(" "),s("p",[t._v("HTML、CSS 和 JS，都具有阻塞渲染的特性。"),s("br"),t._v("\nHTML 阻塞，天经地义——没有 HTML，何来 DOM？没有 DOM，渲染和优化，都是空谈。")]),t._v(" "),s("h4",{attrs:{id:"css-的阻塞"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#css-的阻塞"}},[t._v("#")]),t._v(" CSS 的阻塞")]),t._v(" "),s("p",[t._v("DOM 和 CSSOM 合力才能构建渲染树。这一点会给性能造成严重影响：默认情况下，CSS 是阻塞的资源。浏览器在构建 CSSOM 的过程中，不会渲染任何已处理的内容。即便 DOM 已经解析完毕了，只要 CSSOM 不 OK，那么渲染这个事情就不 OK（这主要是为了避免没有 CSS 的 HTML 页面丑陋地“裸奔”在用户眼前）。")]),t._v(" "),s("p",[t._v("开始解析 HTML 后、解析到 link 标签或者 style 标签时，CSS 才登场，CSSOM 的构建才开始。很多时候，DOM 不得不等待 CSSOM。因此我们可以这样总结：CSS 是阻塞渲染的资源。需要将它尽早、尽快地下载到客户端，以便缩短首次渲染的时间。尽早（将 CSS 放在 head 标签里）和尽快（启用 CDN 实现静态资源加载速度的优化）。这个“把 CSS 往前放”。")]),t._v(" "),s("h4",{attrs:{id:"js-的阻塞"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#js-的阻塞"}},[t._v("#")]),t._v(" JS 的阻塞")]),t._v(" "),s("p",[t._v("JS 的作用在于修改，它帮助我们修改网页的方方面面：内容、样式以及它如何响应用户交互。这“方方面面”的修改，本质上都是对 DOM 和 CSSDOM 进行修改。因此 JS 的执行会阻止 CSSOM，在我们不作显式声明的情况下，它也会阻塞 DOM。")]),t._v(" "),s("p",[t._v("JS 引擎是独立于渲染引擎存在的。我们的 JS 代码在文档的何处插入，就在何处执行。当 HTML 解析器遇到一个 script 标签时，它会暂停渲染过程，将控制权交给 JS 引擎。JS 引擎对内联的 JS 代码会直接执行，对外部 JS 文件还要先获取到脚本、再进行执行。等 JS 引擎运行完毕，浏览器又会把控制权还给渲染引擎，继续 CSSOM 和 DOM 的构建。 因此与其说是 JS 把 CSS 和 HTML 阻塞了，不如说是 JS 引擎抢走了渲染引擎的控制权。")]),t._v(" "),s("h5",{attrs:{id:"js的三种加载方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#js的三种加载方式"}},[t._v("#")]),t._v(" JS的三种加载方式")]),t._v(" "),s("ul",[s("li",[t._v("正常模式：这种情况下 JS 会阻塞浏览器，浏览器必须等待 index.js 加载和执行完毕才能去做其它事情")]),t._v(" "),s("li",[t._v("async 模式：JS 不会阻塞浏览器做任何其它的事情。它的加载是异步的，当它加载结束，JS 脚本会立即执行。")]),t._v(" "),s("li",[t._v("defer 模式：JS 的加载是异步的，执行是被推迟的。等整个文档解析完成、DOMContentLoaded 事件即将被触发时，被标记了 defer 的 JS 文件才会开始依次执行。")])]),t._v(" "),s("p",[s("strong",[t._v("从应用的角度来说，一般当我们的脚本与 DOM 元素和其它脚本之间的依赖关系不强时，我们会选用 async；当脚本依赖于 DOM 元素和其它脚本的执行结果时，我们会选用 defer。")])])])}),[],!1,null,null,null);S.default=_.exports}}]);