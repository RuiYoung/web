(window.webpackJsonp=window.webpackJsonp||[]).push([[48],{336:function(a,s,t){"use strict";t.r(s);var e=t(33),n=Object(e.a)({},(function(){var a=this,s=a.$createElement,t=a._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"webpack-性能调优与-gzip-原理-如何从webpack着手性能优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#webpack-性能调优与-gzip-原理-如何从webpack着手性能优化"}},[a._v("#")]),a._v(" webpack 性能调优与 Gzip 原理(如何从webpack着手性能优化)")]),a._v(" "),t("blockquote",[t("p",[a._v("对于 DNS 解析和 TCP 连接两个步骤，我们前端可以做的努力非常有限。相比之下，HTTP 连接这一层面的优化才是我们网络优化的核心。")])]),a._v(" "),t("h2",{attrs:{id:"http-优化有两个大的方向："}},[t("a",{staticClass:"header-anchor",attrs:{href:"#http-优化有两个大的方向："}},[a._v("#")]),a._v(" HTTP 优化有两个大的方向：")]),a._v(" "),t("ul",[t("li",[a._v("减少请求次数")]),a._v(" "),t("li",[a._v("减少单次请求所花费的时间")])]),a._v(" "),t("h2",{attrs:{id:"webpack-的优化瓶颈，主要是两个方面："}},[t("a",{staticClass:"header-anchor",attrs:{href:"#webpack-的优化瓶颈，主要是两个方面："}},[a._v("#")]),a._v(" webpack 的优化瓶颈，主要是两个方面：")]),a._v(" "),t("ul",[t("li",[a._v("webpack 的构建过程太花时间")]),a._v(" "),t("li",[a._v("webpack 打包的结果体积太大")])]),a._v(" "),t("h3",{attrs:{id:"webpack-优化方案"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#webpack-优化方案"}},[a._v("#")]),a._v(" webpack 优化方案")]),a._v(" "),t("h4",{attrs:{id:"不要让-loader-做太多事情"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#不要让-loader-做太多事情"}},[a._v("#")]),a._v(" 不要让 loader 做太多事情")]),a._v(" "),t("p",[a._v("最常见的优化方式是，用 include 或 exclude 来帮我们避免不必要的转译")]),a._v(" "),t("div",{staticClass:"language-javaScript line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-javascript"}},[t("code",[a._v("module"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n  rules"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n      test"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token regex"}},[a._v("/\\.js$/")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n      exclude"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token regex"}},[a._v("/(node_modules|bower_components)/")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n      use"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        loader"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'babel-loader'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n        options"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n          presets"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'@babel/preset-env'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br"),t("span",{staticClass:"line-number"},[a._v("12")]),t("br"),t("span",{staticClass:"line-number"},[a._v("13")]),t("br"),t("span",{staticClass:"line-number"},[a._v("14")]),t("br")])]),t("p",[a._v("通过限定文件范围带来的性能提升是有限的。除此之外，如果我们选择开启缓存将转译结果缓存至文件系统，则至少可以将 babel-loader 的工作效率提升两倍")]),a._v(" "),t("div",{staticClass:"language-{.javaScript} line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("loader: 'babel-loader?cacheDirectory=true'\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])]),t("p",[a._v("不要放过第三方库(第三方库以 node_modules 为代表，它们庞大得可怕，却又不可或缺。)")]),a._v(" "),t("h4",{attrs:{id:"dllplugin-是基于-windows-动态链接库（dll）的思想被创作出来的。这个插件会把第三方库单独打包到一个文件中，这个文件就是一个单纯的依赖库。这个依赖库不会跟着你的业务代码一起被重新打包，只有当依赖自身发生版本变化时才会重新打包。"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dllplugin-是基于-windows-动态链接库（dll）的思想被创作出来的。这个插件会把第三方库单独打包到一个文件中，这个文件就是一个单纯的依赖库。这个依赖库不会跟着你的业务代码一起被重新打包，只有当依赖自身发生版本变化时才会重新打包。"}},[a._v("#")]),a._v(" DllPlugin 是基于 Windows 动态链接库（dll）的思想被创作出来的。这个插件会把第三方库单独打包到一个文件中，这个文件就是一个单纯的依赖库。这个依赖库不会跟着你的业务代码一起被重新打包，只有当依赖自身发生版本变化时才会重新打包。")]),a._v(" "),t("p",[a._v("用 DllPlugin 处理文件，要分两步走：\n1.基于 dll 专属的配置文件，打包 dll 库\n2.基于 webpack.config.js 文件，打包业务代码")]),a._v(" "),t("h4",{attrs:{id:"happypack-将-loader-由单进程转为多进程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#happypack-将-loader-由单进程转为多进程"}},[a._v("#")]),a._v(" Happypack——将 loader 由单进程转为多进程")]),a._v(" "),t("p",[a._v("大家知道，webpack 是单线程的，就算此刻存在多个任务，你也只能排队一个接一个地等待处理。这是 webpack 的缺点，好在我们的 CPU 是多核的，Happypack 会充分释放 CPU 在多核并发方面的优势，帮我们把任务分解给多个子进程去并发执行，大大提升打包效率。")]),a._v(" "),t("h4",{attrs:{id:"删除冗余代码"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#删除冗余代码"}},[a._v("#")]),a._v(" 删除冗余代码")]),a._v(" "),t("p",[a._v("一个比较典型的应用，就是 Tree-Shaking。\n基于 import/export 语法，Tree-Shaking 可以在编译的过程中获悉哪些模块并没有真正被使用，这些没用的代码，在最后打包的时候会被去除。")]),a._v(" "),t("h4",{attrs:{id:"按需加载"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#按需加载"}},[a._v("#")]),a._v(" 按需加载")]),a._v(" "),t("p",[a._v("一次不加载完所有的文件内容，只加载此刻需要用到的那部分（会提前做拆分）\n当需要更多内容时，再对用到的内容进行即时加载")]),a._v(" "),t("h4",{attrs:{id:"gzip-压缩"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#gzip-压缩"}},[a._v("#")]),a._v(" Gzip 压缩")]),a._v(" "),t("p",[a._v("HTTP 压缩是一种内置到网页服务器和网页客户端中以改进传输速度和带宽利用率的方式。在使用 HTTP 压缩的情况下，HTTP 数据在从服务器发送前就已压缩：兼容的浏览器将在下载所需的格式前宣告支持何种方法给服务器；不支持压缩方法的浏览器将下载未经压缩的数据。最常见的压缩方案包括 Gzip 和 Deflate。")])])}),[],!1,null,null,null);s.default=n.exports}}]);